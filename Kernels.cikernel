/*
 * HSL & HSV
 */
vec3 rgb2hsv(vec3 c){
    
    // Multiply and division factors
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	
	// Equal to condition?
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
        
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c){
    // Multiply and division factors
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

kernel vec4 enhanceSkin(sampler image, vec3 shift0, vec3 shift1){
    vec3 hsv = rgb2hsv(sample(image, samplerCoord(image)).rgb);
    
    // hsv.x value comparation computed by iOS
    if (hsv.x >= 0.0419254281277998 && hsv.x < 0.124741238538867){
        float smoothedHue = smoothstep(0.0419254281277998, 0.124741238538867, hsv.x);
        float hue = hsv.x + (shift0.x + ((shift1.x - shift0.x) * smoothedHue));
        float sat = hsv.y * (shift0.y + ((shift1.y - shift0.y) * smoothedHue));
        float lum = hsv.z * (shift0.z + ((shift1.z - shift0.z) * smoothedHue));
        
        hsv = vec3(hue, sat, lum);
    }
    
    vec3 newPixel = clamp(hsv2rgb(hsv), vec3(0.0), vec3(1.0));
    return vec4(newPixel, 1.0);
}


/*
 * Exposure
 */

 kernel vec4 coreImageKernel(sampler image, float exposure){
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	
	// To multiply or divide with it
	vec3 newPixel = pixel * pow(2.0, exposure);
	return vec4(newPixel, 1.0);
}

/*
 * Threshold
 */

const vec3 luminanceWeighting = vec3(0.2126, 0.7152, 0.0722);

kernel vec4 threshold(sampler image, float dLevel){
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	float luminance = dot(pixel, luminanceWeighting);
	vec3 calPixel = vec3(luminance - dLevel);
	
	vec3 result = compare(calPixel, vec3(0), vec3(1));
	
    return vec4(result, 1.0);
}

/*
 * Saturation
 */
kernel vec4 saturationKernel(sampler image, float saturation){
    
    const vec3 luminanceWeighting = vec3(0.2126, 0.7152, 0.0722);
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	
	// Compute the luminance and get grey picture as a base
	float luminance = dot(pixel, luminanceWeighting);
	vec3 greyScaleColor = vec3(luminance);
	
	// Linear growing from greyScaleColor to pixel value, saturation as the unit
	vec3 newPixel = clamp(mix(greyScaleColor, pixel, saturation), vec3(0.0), vec3(1.0));
	return vec4(newPixel, 1.0);
}

/*
 * Contrast
 */

 kernel vec4 contrastKernel(sampler image, float contrast){
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	
	
	// To shift the pixel value to concentrate or distributed arount 0.5
	vec3 newPixel = (pixel - vec3(0.5)) * contrast + vec3(0.5);
	return vec4(newPixel, 1.0);
}

/*
 * Shadow & Highlight
 */

const vec3 luminanceWeighting = vec3(0.2126, 0.7152, 0.0722);

kernel vec4 shadow(sampler image, float unit)
{
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	
	// Compute the grey model picture and calculate the factor of shadow adjustment - factor
	float luminance = dot(pixel, luminanceWeighting);
	float shadowGreyScale = clamp(luminance - 0.25, 0.0, 0.2);
	
	// Compute new pixel value with 1 - 20 * x^2 - x transiting function
	// Add the function to adjust exposure instruction
	vec3 newPixel = pixel * pow(2.0, unit * (1.0 - (pow(shadowGreyScale, 2.0) * 20.0 - 1.0 * shadowGreyScale)));
	
	newPixel = clamp(newPixel, vec3(0.0), vec3(1.0));
	return vec4(newPixel, 1.0);
}

kernel vec4 highlight(sampler image, float unit)
{
	vec3 pixel = sample(image, samplerCoord(image)).rgb;
	
	// Compute the grey model picture and calculate the factor of shadow adjustment - factor
	float luminance = dot(pixel, luminanceWeighting);
	float shadowGreyScale = clamp(luminance - 0.55, 0.0, 0.2);
	
	// Compute new pixel value with 20 * x^2 + x transiting function
	// Add the function to adjust exposure instruction
	vec3 newPixel = pixel * pow(2.0, unit * (pow(shadowGreyScale, 2.0) * 20.0 + 1.0 * shadowGreyScale));
	
	newPixel = clamp(newPixel, vec3(0.0), vec3(1.0));
	return vec4(newPixel, 1.0);
}